/*--------------------------------------------------------------------
2/02
Cameron C. McIntyre
SIMULATION OF PNS MYELINATED AXON

This model is described in detail in:

McIntyre CC, Richardson AG, and Grill WM. Modeling the excitability of
mammalian nerve fibers: influence of afterpotentials on the recovery
cycle. Journal of Neurophysiology 87:995-1006, 2002.

This model can not be used with NEURON v5.1 as errors in the
extracellular mechanism of v5.1 exist related to xc. The original
stimulations were run on v4.3.1. NEURON v5.2 has corrected the 
limitations in v5.1 and can be used to run this model.
----------------------------------------------------------------------*/
//load_file("nrngui.hoc")

// ---------------------- Global Variables ----------------------------
// modified by bh (5/1/12), and Leo Medina (7/1/2013)
begintemplate MRGFiber
public section, fiberD, axonnodes, nnodes, xcoord, ycoord, zcoord, total_sections, v_init, sl

objref section[1]
objref sl, xcoord, ycoord, zcoord 

proc model_globels() {			
	celsius=37			
	v_init=-80 //mV//  		
	//dt=5E-4 //ms//  
  //steps_per_ms = 500 // allows dt = 0.002
	//tstop=10	//ms
    
//Stimulation parameters//	
  vscale = 1    //scaling the voltage field
  t_vscale = 0  //when you start scaling, useful for recovery cycle, default 0
    
//topological parameters//		
	//axonnodes  = 101  			
	paranodes1 = 2*(axonnodes-1) // MYSA
	paranodes2 = 2*(axonnodes-1) // FLUT
	axoninter  = 6*(axonnodes-1) // STIN
	axontotal  = axonnodes + 10*(axonnodes-1)	 //
	midnode = (axonnodes-1)/2
	
//morphological parameters//	
//	fiberD=14	//choose from 2.0, 5.7, 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0, 16.0
	paralength1=3  
	nodelength=1.0
	space_p1=0.002  
	space_p2=0.004
	space_i=0.004
//electrical parameters//		
	rhoa=0.7e6 //Ohm-um//
	mycm=0.1 //uF/cm2/lamella membrane//
	mygm=0.001 //S/cm2/lamella membrane//
  C_dc = 2
}


proc dependent_var() {
	// ajw: copied fiberD=2 over from TC neuron 2/19/2012
	if (fiberD==2) {g = 0.605 axonD=1.6 nodeD=1.4 paraD1=1.4 paraD2=1.6 deltax=200 paralength2=10 nl=30} 
	if (fiberD==5.7) {g=0.605 axonD=3.4 nodeD=1.9 paraD1=1.9 paraD2=3.4 deltax=500 paralength2=35 nl=80}  
	if (fiberD==7.3) {g=0.630 axonD=4.6 nodeD=2.4 paraD1=2.4 paraD2=4.6 deltax=750 paralength2=38 nl=100}
	if (fiberD==8.7) {g=0.661 axonD=5.8 nodeD=2.8 paraD1=2.8 paraD2=5.8 deltax=1000 paralength2=40 nl=110}
	if (fiberD==10.0) {g=0.690 axonD=6.9 nodeD=3.3 paraD1=3.3 paraD2=6.9 deltax=1150 paralength2=46 nl=120}
	if (fiberD==11.5) {g=0.700 axonD=8.1 nodeD=3.7 paraD1=3.7 paraD2=8.1 deltax=1250 paralength2=50 nl=130}  
	if (fiberD==12.8) {g=0.719 axonD=9.2 nodeD=4.2 paraD1=4.2 paraD2=9.2 deltax=1350 paralength2=54 nl=135}
	if (fiberD==14.0) {g=0.739 axonD=10.4 nodeD=4.7 paraD1=4.7 paraD2=10.4 deltax=1400 paralength2=56 nl=140}
	if (fiberD==15.0) {g=0.767 axonD=11.5 nodeD=5.0 paraD1=5.0 paraD2=11.5 deltax=1450 paralength2=58 nl=145}
	if (fiberD==16.0) {g=0.791 axonD=12.7 nodeD=5.5 paraD1=5.5 paraD2=12.7 deltax=1500 paralength2=60 nl=150}
	Rpn0=(rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
	Rpn1=(rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
	Rpn2=(rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
	Rpx=(rhoa*.01)/(PI*((((axonD/2)+space_i)^2)-((axonD/2)^2)))
	interlength=(deltax-nodelength-(2*paralength1)-(2*paralength2))/6
	}


// ---------------------- Building Axon ----------------------------
// modified by bh (5/1/12)
// s is a pointer to all the elements of the neuron (i.e. dendrities, soma, axon)
// s[i] = new SectionRef()
//  - keeps a pointer reference to a given section
// axon coordinates
// in order: 1. node, 2. MYSA, 3. FLUT, 4. STIN
//  -- that is 1 comes first, etc...
create node[1], MYSA[1], FLUT[1], STIN[1]
proc initialize(){
  
  objref section[axontotal]
  
  xcoord = new Vector(axontotal,0)
  sl = new SectionList()
  
  create node[axonnodes], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]
  
	for i=0,axonnodes-1 {
		node[i]{
		
			ii = i
			section[i] = new SectionRef()
      sl.append()
			xcoord.x[ii] = .5*nodelength + i*deltax

			nseg=1
			diam=nodeD
			L=nodelength
			Ra=rhoa/10000                  
			if(i == 0 || i == axonnodes-1){
				insert pas
				g_pas = 0.0001
				e_pas = -70
				insert extracellular
				xg      = mygm/(nl*2) // lumps all lamellae specific conductances into 1 membrane
				xc      = mycm/(nl*2) // lumps all lamellae specific capacitances into 1 membrane
			} else{
				insert axnode			
				insert extracellular xraxial=Rpn0 
				xg=1e10 // short circuit
				xc=0    // short circuit
			}      
      cm = C_dc
      
		}
	}
	
	for i=0, paranodes1-1 {
		MYSA[i]{
		
			ii = i + axonnodes
			section[ii] = new SectionRef()
      sl.append()
			if (i % 2 == 0) { xcoord.x[ii] = nodelength + .5*paralength1 + int(i/2)*deltax }	// left mysa of each segment
			if (i % 2 == 1) { xcoord.x[ii] = nodelength + 1.5*paralength1 + 2*paralength2 + 6*interlength + int(i/2)*deltax } // right mysa of each segment
			
			nseg=1
			diam=fiberD
			L=paralength1
			Ra=rhoa*(1/(paraD1/fiberD)^2)/10000
      //cm = (paraD1/fiberD)*3.82E4/(1.84E4+freqstim) //Original: 2*paraD1/fiberD      			
			insert pas
			g_pas=0.001*paraD1/fiberD		
			e_pas=v_init
			insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
      
      cm = C_dc*paraD1/fiberD
      					
		}
	}
	
	for i=0, paranodes2-1 {
		FLUT[i]{
		
			ii = i + axonnodes + paranodes1
			section[ii] = new SectionRef()
      sl.append()
			if (i % 2 == 0) { xcoord.x[ii] = nodelength + paralength1 + .5*paralength2 + int(i/2)*deltax } // left flut
			if (i % 2 == 1) { xcoord.x[ii] = nodelength + paralength1 + 1.5*paralength2 + 6*interlength + int(i/2)*deltax } //right flut
			
			nseg=1
			diam=fiberD
			L=paralength2
			Ra=rhoa*(1/(paraD2/fiberD)^2)/10000
			//cm = (paraD2/fiberD)*3.82E4/(1.84E4+freqstim) //Original: 2*paraD2/fiberD      
			insert pas
			g_pas=0.0001*paraD2/fiberD		
			e_pas=v_init
			insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
      
      cm = C_dc*paraD2/fiberD
      			
		}
	}
	
	for i=0, axoninter-1 {
		STIN[i]{
		
			ii = i + axonnodes + paranodes1 + paranodes2
			section[ii] = new SectionRef()
      sl.append()
			if (i % 6 == 0) { xcoord.x[ii] = nodelength + paralength1 + paralength2 + 0.5*interlength + int(i/6)*deltax }
			if (i % 6 == 1) { xcoord.x[ii] = nodelength + paralength1 + paralength2 + 1.5*interlength + int(i/6)*deltax }
			if (i % 6 == 2) { xcoord.x[ii] = nodelength + paralength1 + paralength2 + 2.5*interlength + int(i/6)*deltax }
			if (i % 6 == 3) { xcoord.x[ii] = nodelength + paralength1 + paralength2 + 3.5*interlength + int(i/6)*deltax }
			if (i % 6 == 4) { xcoord.x[ii] = nodelength + paralength1 + paralength2 + 4.5*interlength + int(i/6)*deltax }
			if (i % 6 == 5) { xcoord.x[ii] = nodelength + paralength1 + paralength2 + 5.5*interlength + int(i/6)*deltax }
							
			nseg=1
			diam=fiberD
			L=interlength
			Ra=rhoa*(1/(axonD/fiberD)^2)/10000
			//cm = (axonD/fiberD)*3.82E4/(1.84E4+freqstim) //Original: cm=2*axonD/fiberD     
			insert pas
			g_pas=0.0001*axonD/fiberD
			e_pas=v_init
			insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
			
      cm = C_dc*axonD/fiberD
            
		}
	}
	
	for i=0, axonnodes-2 {
		connect MYSA[2*i](0), node[i](1)
		connect FLUT[2*i](0), MYSA[2*i](1)
		connect STIN[6*i](0), FLUT[2*i](1)
		connect STIN[6*i+1](0), STIN[6*i](1)
		connect STIN[6*i+2](0), STIN[6*i+1](1)
		connect STIN[6*i+3](0), STIN[6*i+2](1)
		connect STIN[6*i+4](0), STIN[6*i+3](1)	
		connect STIN[6*i+5](0), STIN[6*i+4](1)	
		connect FLUT[2*i+1](0), STIN[6*i+5](1)
		connect MYSA[2*i+1](0), FLUT[2*i+1](1)
		connect node[i+1](0), MYSA[2*i+1](1)	
		}
	
	finitialize(v_init)
	fcurrent()
}

func total_sections(){
	return axontotal
}

proc init(){
  
  fiberD = 14
  axonnodes = 101  
  	
  if (numarg()>0) {fiberD = $1}
  if (numarg()>1) {axonnodes = $2}  

  model_globels()
  dependent_var()  
  initialize()
  
  // realigning axon w/ middle node @ x = 0
  // rescaling distance from um -> mm
  xcoord = xcoord.add( -xcoord.x[midnode] )
  xcoord = xcoord.mul(1e-3)
  ycoord = new Vector(axontotal,0)
  zcoord = new Vector(axontotal,0)
  
  // total_sections = axontotal
  nnodes = axonnodes
  
}

endtemplate MRGFiber